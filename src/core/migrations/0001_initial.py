# Generated by Django 4.2.4 on 2023-11-24 14:16

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AdvancedSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_notifications_in_protocol",
                    models.BooleanField(default=False),
                ),
                (
                    "display_biased_in_amendment_answer_pdf",
                    models.BooleanField(default=True),
                ),
                ("require_internal_vote_review", models.BooleanField(default=False)),
                ("logo", models.BinaryField(null=True)),
                ("logo_mimetype", models.CharField(max_length=100, null=True)),
                ("print_logo", models.BinaryField(null=True)),
                ("print_logo_mimetype", models.CharField(max_length=100, null=True)),
                ("vote1_extra", models.TextField(blank=True, null=True)),
                ("vote2_extra", models.TextField(blank=True, null=True)),
                ("vote3a_extra", models.TextField(blank=True, null=True)),
                ("vote3b_extra", models.TextField(blank=True, null=True)),
                ("vote4_extra", models.TextField(blank=True, null=True)),
                ("vote5_extra", models.TextField(blank=True, null=True)),
                ("vote_pdf_extra", models.TextField(blank=True, null=True)),
                ("address", models.TextField(null=True)),
                ("meeting_address", models.TextField(null=True)),
                ("contact_email", models.EmailField(max_length=254, null=True)),
                ("contact_url", models.URLField(null=True)),
                ("member_list_url", models.URLField(null=True)),
                ("signature_block", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="EthicsCommission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("name", models.CharField(max_length=120)),
                (
                    "vote_receiver",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ForeignParticipatingCenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=60)),
                ("investigator_name", models.CharField(blank=True, max_length=60)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Investigator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("main", models.BooleanField(blank=True, default=True)),
                ("organisation", models.CharField(max_length=80)),
                ("phone", models.CharField(blank=True, max_length=30)),
                ("mobile", models.CharField(blank=True, max_length=30)),
                ("fax", models.CharField(blank=True, max_length=30)),
                ("email", models.EmailField(max_length=254)),
                ("jus_practicandi", models.BooleanField(blank=True, default=False)),
                ("specialist", models.CharField(blank=True, max_length=80)),
                ("certified", models.BooleanField(blank=True, default=False)),
                ("subject_count", models.PositiveIntegerField()),
                (
                    "contact_gender",
                    models.CharField(
                        choices=[("f", "Ms"), ("m", "Mr")], max_length=1, null=True
                    ),
                ),
                ("contact_title", models.CharField(blank=True, max_length=30)),
                ("contact_first_name", models.CharField(max_length=30)),
                ("contact_last_name", models.CharField(max_length=30)),
            ],
            options={
                "ordering": ["-main", "id"],
            },
        ),
        migrations.CreateModel(
            name="InvestigatorEmployee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sex",
                    models.CharField(choices=[("m", "Mr"), ("f", "Ms")], max_length=1),
                ),
                ("title", models.CharField(blank=True, max_length=40)),
                ("firstname", models.CharField(max_length=40)),
                ("surname", models.CharField(max_length=40)),
                ("organisation", models.CharField(max_length=80)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Measure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("6.1", "only study-related"),
                            ("6.2", "for routine purposes"),
                        ],
                        max_length=3,
                    ),
                ),
                ("type", models.CharField(max_length=150)),
                ("count", models.CharField(max_length=150)),
                ("period", models.CharField(max_length=30)),
                ("total", models.CharField(max_length=30)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="MedicalCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=60)),
                ("abbrev", models.CharField(max_length=12, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="MySubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.IntegerField()),
                ("submission_id", models.IntegerField()),
            ],
            options={
                "db_table": "core_mysubmission",
            },
        ),
        migrations.CreateModel(
            name="NonTestedUsedDrug",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("generic_name", models.CharField(max_length=40)),
                ("preparation_form", models.CharField(max_length=40)),
                ("dosage", models.CharField(max_length=40)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ParticipatingCenterNonSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=60)),
                ("investigator_name", models.CharField(blank=True, max_length=60)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ec_number", models.PositiveIntegerField(db_index=True, unique=True)),
                ("workflow_lane", models.SmallIntegerField(db_index=True, null=True)),
                ("remission", models.BooleanField(default=False)),
                (
                    "invite_primary_investigator_to_meeting",
                    models.BooleanField(default=False),
                ),
                ("is_transient", models.BooleanField(default=False)),
                ("is_finished", models.BooleanField(default=False)),
                ("is_expired", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_notification_update", models.BooleanField(default=False)),
                ("is_transient", models.BooleanField(default=False)),
                ("is_acknowledged", models.BooleanField(default=False)),
                ("project_title", models.TextField()),
                (
                    "eudract_number",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "submission_type",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "monocentric"),
                            (2, "multicentric, main ethics commission"),
                            (6, "multicentric, local ethics commission"),
                        ],
                        default=1,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("sponsor_name", models.CharField(max_length=100, null=True)),
                ("sponsor_address", models.CharField(max_length=60, null=True)),
                ("sponsor_zip_code", models.CharField(max_length=10, null=True)),
                ("sponsor_city", models.CharField(max_length=80, null=True)),
                ("sponsor_phone", models.CharField(max_length=30, null=True)),
                ("sponsor_fax", models.CharField(blank=True, max_length=30, null=True)),
                ("sponsor_email", models.EmailField(max_length=254, null=True)),
                ("sponsor_uid", models.CharField(blank=True, max_length=35, null=True)),
                (
                    "invoice_name",
                    models.CharField(blank=True, max_length=160, null=True),
                ),
                (
                    "invoice_address",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "invoice_zip_code",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "invoice_city",
                    models.CharField(blank=True, max_length=80, null=True),
                ),
                (
                    "invoice_phone",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("invoice_fax", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "invoice_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("invoice_uid", models.CharField(blank=True, max_length=35, null=True)),
                ("project_type_non_reg_drug", models.BooleanField(default=False)),
                ("project_type_reg_drug", models.BooleanField(default=False)),
                (
                    "project_type_reg_drug_within_indication",
                    models.BooleanField(default=False),
                ),
                (
                    "project_type_reg_drug_not_within_indication",
                    models.BooleanField(default=False),
                ),
                ("project_type_medical_method", models.BooleanField(default=False)),
                ("project_type_medical_device", models.BooleanField(default=False)),
                (
                    "project_type_medical_device_with_ce",
                    models.BooleanField(default=False),
                ),
                (
                    "project_type_medical_device_without_ce",
                    models.BooleanField(default=False),
                ),
                (
                    "project_type_medical_device_performance_evaluation",
                    models.BooleanField(default=False),
                ),
                ("project_type_basic_research", models.BooleanField(default=False)),
                ("project_type_genetic_study", models.BooleanField(default=False)),
                ("project_type_register", models.BooleanField(default=False)),
                ("project_type_biobank", models.BooleanField(default=False)),
                ("project_type_retrospective", models.BooleanField(default=False)),
                ("project_type_questionnaire", models.BooleanField(default=False)),
                (
                    "project_type_education_context",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(1, "Dissertation"), (2, "Diplomarbeit")],
                        null=True,
                    ),
                ),
                ("project_type_misc", models.TextField(blank=True, null=True)),
                (
                    "project_type_psychological_study",
                    models.BooleanField(default=False),
                ),
                ("project_type_nursing_study", models.BooleanField(default=False)),
                (
                    "project_type_non_interventional_study",
                    models.BooleanField(default=False),
                ),
                ("project_type_gender_medicine", models.BooleanField(default=False)),
                ("specialism", models.TextField(null=True)),
                ("pharma_checked_substance", models.TextField(blank=True, null=True)),
                ("pharma_reference_substance", models.TextField(blank=True, null=True)),
                ("medtech_checked_product", models.TextField(blank=True, null=True)),
                (
                    "medtech_reference_substance",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "clinical_phase",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("already_voted", models.BooleanField(default=False)),
                ("subject_count", models.PositiveIntegerField()),
                ("subject_minage", models.PositiveIntegerField(blank=True, null=True)),
                ("subject_maxage", models.PositiveIntegerField(blank=True, null=True)),
                ("subject_noncompetents", models.BooleanField(default=False)),
                ("subject_males", models.BooleanField(default=False)),
                ("subject_females", models.BooleanField(default=False)),
                ("subject_childbearing", models.BooleanField(default=False)),
                ("subject_duration", models.CharField(max_length=200)),
                ("subject_duration_active", models.CharField(max_length=200)),
                (
                    "subject_duration_controls",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("subject_planned_total_duration", models.CharField(max_length=250)),
                (
                    "substance_registered_in_countries",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django_countries.fields.CountryField(max_length=2),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "substance_preexisting_clinical_tries",
                    models.BooleanField(blank=True, db_column="existing_tries"),
                ),
                (
                    "substance_p_c_t_countries",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django_countries.fields.CountryField(max_length=2),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "substance_p_c_t_phase",
                    models.CharField(blank=True, max_length=80, null=True),
                ),
                ("substance_p_c_t_period", models.TextField(blank=True, null=True)),
                (
                    "substance_p_c_t_application_type",
                    models.CharField(blank=True, max_length=145, null=True),
                ),
                (
                    "substance_p_c_t_gcp_rules",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "substance_p_c_t_final_report",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "medtech_product_name",
                    models.CharField(blank=True, max_length=210, null=True),
                ),
                (
                    "medtech_manufacturer",
                    models.CharField(blank=True, max_length=80, null=True),
                ),
                (
                    "medtech_certified_for_exact_indications",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "medtech_certified_for_other_indications",
                    models.BooleanField(blank=True, null=True),
                ),
                ("medtech_ce_symbol", models.BooleanField(blank=True, null=True)),
                ("medtech_manual_included", models.BooleanField(blank=True, null=True)),
                (
                    "medtech_technical_safety_regulations",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "medtech_departure_from_regulations",
                    models.TextField(blank=True, null=True),
                ),
                ("insurance_not_required", models.BooleanField(default=False)),
                (
                    "insurance_name",
                    models.CharField(blank=True, max_length=125, null=True),
                ),
                (
                    "insurance_address",
                    models.CharField(blank=True, max_length=80, null=True),
                ),
                (
                    "insurance_phone",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "insurance_contract_number",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "insurance_validity",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                ("additional_therapy_info", models.TextField(blank=True)),
                ("german_project_title", models.TextField(null=True)),
                ("german_summary", models.TextField(null=True)),
                ("german_preclinical_results", models.TextField(null=True)),
                ("german_primary_hypothesis", models.TextField(null=True)),
                ("german_inclusion_exclusion_crit", models.TextField(null=True)),
                ("german_ethical_info", models.TextField(null=True)),
                (
                    "german_protected_subjects_info",
                    models.TextField(blank=True, null=True),
                ),
                ("german_recruitment_info", models.TextField(null=True)),
                ("german_consent_info", models.TextField(null=True)),
                ("german_risks_info", models.TextField(null=True)),
                ("german_benefits_info", models.TextField(null=True)),
                ("german_relationship_info", models.TextField(null=True)),
                ("german_concurrent_study_info", models.TextField(null=True)),
                ("german_sideeffects_info", models.TextField(null=True)),
                ("german_statistical_info", models.TextField(blank=True, null=True)),
                ("german_dataprotection_info", models.TextField(blank=True, null=True)),
                ("german_aftercare_info", models.TextField(null=True)),
                ("german_payment_info", models.TextField(null=True)),
                ("german_abort_info", models.TextField(null=True)),
                ("german_dataaccess_info", models.TextField(blank=True, null=True)),
                ("german_financing_info", models.TextField(blank=True, null=True)),
                ("german_additional_info", models.TextField(blank=True, null=True)),
                (
                    "study_plan_blind",
                    models.SmallIntegerField(
                        choices=[
                            (0, "open"),
                            (1, "blind"),
                            (2, "double-blind"),
                            (3, "not applicable"),
                        ]
                    ),
                ),
                ("study_plan_observer_blinded", models.BooleanField(default=False)),
                ("study_plan_randomized", models.BooleanField(default=False)),
                ("study_plan_parallelgroups", models.BooleanField(default=False)),
                ("study_plan_controlled", models.BooleanField(default=False)),
                ("study_plan_cross_over", models.BooleanField(default=False)),
                ("study_plan_placebo", models.BooleanField(default=False)),
                ("study_plan_factorized", models.BooleanField(default=False)),
                ("study_plan_pilot_project", models.BooleanField(default=False)),
                ("study_plan_equivalence_testing", models.BooleanField(default=False)),
                ("study_plan_misc", models.TextField(blank=True, null=True)),
                (
                    "study_plan_number_of_groups",
                    models.TextField(blank=True, null=True),
                ),
                ("study_plan_stratification", models.TextField(blank=True, null=True)),
                (
                    "study_plan_sample_frequency",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "study_plan_primary_objectives",
                    models.TextField(blank=True, null=True),
                ),
                ("study_plan_null_hypothesis", models.TextField(blank=True, null=True)),
                (
                    "study_plan_alternative_hypothesis",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "study_plan_secondary_objectives",
                    models.TextField(blank=True, null=True),
                ),
                ("study_plan_alpha", models.CharField(max_length=80)),
                (
                    "study_plan_alpha_sided",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(0, "single-sided"), (1, "double-sided")],
                        null=True,
                    ),
                ),
                ("study_plan_power", models.CharField(max_length=80)),
                ("study_plan_statalgorithm", models.CharField(max_length=80)),
                ("study_plan_multiple_test", models.BooleanField(default=False)),
                (
                    "study_plan_multiple_test_correction_algorithm",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("study_plan_dropout_ratio", models.CharField(max_length=80)),
                (
                    "study_plan_population_intention_to_treat",
                    models.BooleanField(default=False),
                ),
                (
                    "study_plan_population_per_protocol",
                    models.BooleanField(default=False),
                ),
                ("study_plan_interim_evaluation", models.BooleanField(default=False)),
                (
                    "study_plan_abort_crit",
                    models.CharField(blank=True, max_length=265, null=True),
                ),
                (
                    "study_plan_planned_statalgorithm",
                    models.TextField(blank=True, null=True),
                ),
                ("study_plan_dataquality_checking", models.TextField()),
                ("study_plan_datamanagement", models.TextField()),
                ("study_plan_biometric_planning", models.CharField(max_length=260)),
                (
                    "study_plan_statistics_implementation",
                    models.CharField(max_length=270),
                ),
                (
                    "study_plan_dataprotection_choice",
                    models.CharField(
                        choices=[
                            ("personal", "individual-related"),
                            ("non-personal", "implicit individual-related"),
                            ("anonymous", "completely anonymous"),
                        ],
                        default="non-personal",
                        max_length=15,
                    ),
                ),
                (
                    "study_plan_dataprotection_reason",
                    models.CharField(blank=True, max_length=120, null=True),
                ),
                (
                    "study_plan_dataprotection_dvr",
                    models.CharField(blank=True, max_length=180, null=True),
                ),
                (
                    "study_plan_dataprotection_anonalgoritm",
                    models.TextField(blank=True, null=True),
                ),
                ("submitter_email", models.EmailField(max_length=254, null=True)),
                ("submitter_organisation", models.CharField(max_length=180)),
                ("submitter_jobtitle", models.CharField(max_length=130)),
                ("submitter_is_coordinator", models.BooleanField(default=False)),
                ("submitter_is_main_investigator", models.BooleanField(default=False)),
                ("submitter_is_sponsor", models.BooleanField(default=False)),
                (
                    "submitter_is_authorized_by_sponsor",
                    models.BooleanField(default=False),
                ),
                (
                    "sponsor_contact_gender",
                    models.CharField(
                        choices=[("f", "Ms"), ("m", "Mr")], max_length=1, null=True
                    ),
                ),
                ("sponsor_contact_title", models.CharField(blank=True, max_length=30)),
                ("sponsor_contact_first_name", models.CharField(max_length=30)),
                ("sponsor_contact_last_name", models.CharField(max_length=30)),
                (
                    "invoice_contact_gender",
                    models.CharField(
                        blank=True,
                        choices=[("f", "Ms"), ("m", "Mr")],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("invoice_contact_title", models.CharField(blank=True, max_length=30)),
                (
                    "invoice_contact_first_name",
                    models.CharField(blank=True, max_length=30),
                ),
                (
                    "invoice_contact_last_name",
                    models.CharField(blank=True, max_length=30),
                ),
                (
                    "submitter_contact_gender",
                    models.CharField(
                        choices=[("f", "Ms"), ("m", "Mr")], max_length=1, null=True
                    ),
                ),
                (
                    "submitter_contact_title",
                    models.CharField(blank=True, max_length=30),
                ),
                ("submitter_contact_first_name", models.CharField(max_length=30)),
                ("submitter_contact_last_name", models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="TemporaryAuthorization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="temp_auth",
                        to="core.submission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="temp_submission_auth",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
